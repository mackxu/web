// Generated by CoffeeScript 1.7.1
(function() {
  var Dice, Dice1, Dice2, Dot, PI, ctx,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  PI = Math.PI;

  ctx = $('#craps').get(0).getContext('2d');

  ctx.beginPath();

  ctx.arc(60, 60, 50, 0, PI * 2);

  ctx.fillStyle = "#000000";

  ctx.fill();

  ctx.beginPath();

  ctx.arc(180, 60, 50, 0, PI * 2);

  ctx.lineWidth = 1.0;

  ctx.strokeStyle = '#000';

  ctx.stroke();

  ctx.beginPath();

  ctx.fillStyle = '#ff0';

  ctx.fillRect(10, 120, 100, 100);

  ctx.beginPath();

  ctx.lineWidth = 2.0;

  ctx.strokeStyle = '#000';

  ctx.strokeRect(130, 120, 100, 100);

  Dot = (function() {
    function Dot(ctx, pos, dotR) {
      this.ctx = ctx;
      this.pos = pos;
      this.dotR = dotR;
    }

    Dot.prototype.render = function() {
      this.ctx.arc(this.pos[0], this.pos[1], this.dotR, 0, 2 * Math.PI);
    };

    Dot.dots = function(ctx, aPos, dotR) {
      var pos, _i, _len, _results;
      _results = [];
      for (_i = 0, _len = aPos.length; _i < _len; _i++) {
        pos = aPos[_i];
        _results.push(new Dot(ctx, pos, dotR).render());
      }
      return _results;
    };

    return Dot;

  })();

  Dice = (function() {
    function Dice(ctx, diceX, diceY) {
      this.ctx = ctx;
      this.diceX = diceX;
      this.diceY = diceY;
      this.diceW = 100;
      this.diceH = 100;
      this.dotR = 6;
      this.dots = [];
      this.ctx.beginPath();
      this.ctx.lineWidth = 5;
      this.ctx.strokeStyle = '#000';
      this.ctx.clearRect(this.diceX, this.diceY, this.diceW, this.diceH);
      this.ctx.strokeRect(this.diceX, this.diceY, this.diceW, this.diceH);
      this.ctx.fillStyle = '#000';
    }

    Dice.prototype.draw = function() {
      this.ctx.beginPath();
      Dot.dots(this.ctx, this.dots, this.dotR);
      this.ctx.closePath();
      return this.ctx.fill();
    };

    return Dice;

  })();

  Dice1 = (function(_super) {
    __extends(Dice1, _super);

    function Dice1() {
      Dice1.__super__.constructor.apply(this, arguments);
      this.dots = [[this.diceX + 0.5 * this.diceW, this.diceY + 0.5 * this.diceH]];
    }

    return Dice1;

  })(Dice);

  Dice2 = (function(_super) {
    __extends(Dice2, _super);

    function Dice2() {
      Dice2.__super__.constructor.apply(this, arguments);
      this.dots = [[this.diceX + 3 * this.dotR, this.diceY + 3 * this.dotR], [this.diceX + this.diceW - 3 * this.dotR, this.diceY + this.diceH - 3 * this.dotR]];
    }

    return Dice2;

  })(Dice);

  new Dice1(ctx, 300, 120).draw();

  new Dice2(ctx, 300, 10).draw();

}).call(this);
